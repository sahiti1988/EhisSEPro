/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ehis;



import java.awt.HeadlessException;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.*;
import net.proteanit.sql.DbUtils;


/**
 *
 * @author SahitiRaviChand
 */
public class Calender extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    PreparedStatement pst1 = null;
    //String username;

     EHIS ehis;
    /**
     * Creates new form Calender
     */
    public Calender() {
        initComponents();
        //this.username = username;
        conn = EHIS.getConnection();
        Update_table();
    }

    private void Update_table() {
        try {
            String sql = "Select * from Calender";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            table_Calender.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    public void cancelAppointment(){
         try {
            String PatientID = txt_Patient_ID.getText();
            System.out.println("PatientID:" + PatientID);
            String sql = "delete from Calender where Patient_ID = '"+ PatientID +"'" ;
            System.out.println("sql:" + sql);
            pst1 = conn.prepareStatement(sql);
            pst1.executeUpdate();
            Update_table();
            clear();
         }catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }
    
    public void clear(){
        txt_Patient_ID.setText("");
        txt_Patient_Name.setText(""); 
        txt_Appt_Date.setDateFormatString("");
        cmb_Type_Of_Appt.setSelectedItem("");
        cmb_HR.setSelectedIndex(0);
        cmb_MIN.setSelectedIndex(0);
        txt_Appt_End_Time.setText("");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_Back = new javax.swing.JButton();
        lbl_CalenderforDrBillMiller = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_Type = new javax.swing.JLabel();
        txt_Patient_ID = new javax.swing.JTextField();
        lbl_Time = new javax.swing.JLabel();
        btn_Cancel_Appointment = new javax.swing.JButton();
        lbl_Patient_ID = new javax.swing.JLabel();
        lbl_Date = new javax.swing.JLabel();
        btn_Make_Appointment = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txt_Patient_Name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txt_Appt_End_Time = new javax.swing.JTextField();
        cmb_Type_Of_Appt = new javax.swing.JComboBox();
        cmb_HR = new javax.swing.JComboBox();
        cmb_MIN = new javax.swing.JComboBox();
        btn_Clear = new javax.swing.JButton();
        txt_Appt_Date = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Calender = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btn_show_Appointments = new javax.swing.JButton();
        btn_show_All_Appointments = new javax.swing.JButton();
        txt_Show_Appointments = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_Back.setText("Back");
        btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackActionPerformed(evt);
            }
        });

        lbl_CalenderforDrBillMiller.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        lbl_CalenderforDrBillMiller.setText("Calender for: Dr Bill Miller");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Schedule Appointment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(51, 51, 255)));

        lbl_Type.setText("Type Of Appt: ");

        lbl_Time.setText("Appt_Start_Time: ");

        btn_Cancel_Appointment.setText("Cancel Appointment");
        btn_Cancel_Appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Cancel_AppointmentActionPerformed(evt);
            }
        });

        lbl_Patient_ID.setText("Patient_ID: ");

        lbl_Date.setText("Appt_Date: ");

        btn_Make_Appointment.setText("Make Appointment");
        btn_Make_Appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Make_AppointmentActionPerformed(evt);
            }
        });

        jLabel4.setText("Patient_Name: ");

        jLabel1.setText("Appt_End_Time:");

        cmb_Type_Of_Appt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Annual Physical Exams", "Follow Up", "Regular", "Other" }));

        cmb_HR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        cmb_MIN.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "59", " " }));
        cmb_MIN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_MINItemStateChanged(evt);
            }
        });

        btn_Clear.setText("Clear");
        btn_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Patient_ID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt_Patient_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_Patient_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(lbl_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Appt_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(lbl_Type)
                        .addGap(18, 18, 18)
                        .addComponent(cmb_Type_Of_Appt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_Time)
                                .addGap(18, 18, 18)
                                .addComponent(cmb_HR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmb_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(120, 120, 120)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_Make_Appointment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(btn_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txt_Appt_End_Time, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(btn_Cancel_Appointment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(157, 157, 157))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_Type)
                                .addComponent(cmb_Type_Of_Appt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_Date)
                                .addComponent(lbl_Patient_ID)
                                .addComponent(txt_Patient_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(txt_Patient_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txt_Appt_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_Appt_End_Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_MIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_HR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Time))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Make_Appointment)
                    .addComponent(btn_Cancel_Appointment)
                    .addComponent(btn_Clear))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        table_Calender.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient_ID", "Patient_Name", "Appt_Date", "Type Of Appt", "Appt_Start_Time", "Appt_End_Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table_Calender.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_CalenderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_Calender);

        jLabel2.setText("Click on the below calender to see the appointments for that date.");

        btn_show_Appointments.setText("Show Appointments");
        btn_show_Appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_AppointmentsActionPerformed(evt);
            }
        });

        btn_show_All_Appointments.setText("Show All Appointments");
        btn_show_All_Appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_All_AppointmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(txt_Show_Appointments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_show_Appointments))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(btn_show_All_Appointments)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(txt_Show_Appointments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn_show_Appointments))
                        .addGap(49, 49, 49)
                        .addComponent(btn_show_All_Appointments)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Back)
                        .addGap(192, 192, 192)
                        .addComponent(lbl_CalenderforDrBillMiller)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_Back))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lbl_CalenderforDrBillMiller)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackActionPerformed
//        DoctorNursePanel panel = new DoctorNursePanel(username);
//        //panel.setPanel(this);
//        ehis.setContentPane(panel);
//        ehis.pack();
//        ehis.validate();
    }//GEN-LAST:event_btn_BackActionPerformed

    private void btn_Cancel_AppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Cancel_AppointmentActionPerformed
        // TODO add your handling code here:
        cancelAppointment();
    }//GEN-LAST:event_btn_Cancel_AppointmentActionPerformed

    private void btn_Make_AppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Make_AppointmentActionPerformed
        //String sql = "INSERT INTO Calender VALUES (?1,?2,?3,?4,?5)" ;
        try {
            //String sql = "INSERT INTO Calender (Patient_ID,Patient_Name,Appointment Date,Appointment Time,Type) VALUES (?,?,?,?,?)";
            String sql = "INSERT INTO Calender VALUES (?,?,?,?,?,?)";
            // String sql = "INSERT INTO Calender values  ('5','dsfj','2013-04-04','10:10:10','30 mins')" ;
            
//            int id = Integer.parseInt(txt_Patient_ID.getText());
//            String patientName = txt_Patient_Name.getText();
//            Date date = Date.valueOf(txt_Date.getDateFormatString());
//            Time time = Time.valueOf(txt_Time.getText());
//            String type = txt_Type.getText();
            java.util.Date currDate = new java.util.Date();
           // System.out.println("currDate:" + currDate);
            java.util.Date date = txt_Appt_Date.getDate();
           
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            
             
           // System.out.println("sqlDate:" + sqlDate);

           
           pst = conn.prepareStatement(sql);
           pst.setString(1, txt_Patient_ID.getText());
           pst.setString(2, txt_Patient_Name.getText()); 
            if(date.before(currDate)) { 
                JOptionPane.showMessageDialog(null, "Appointment Date is not valid");               
            }else{
                pst.setString(3, sqlDate.toString());                
            }
            
           pst.setString(4, cmb_Type_Of_Appt.getSelectedItem().toString());
           pst.setString(5, cmb_HR.getSelectedItem().toString()+ ":" + cmb_MIN.getSelectedItem().toString());
           pst.setString(6, txt_Appt_End_Time.getText().toString());
           
//           String appt_start = cmb_HR.getSelectedItem().toString()+"" + cmb_MIN.getSelectedItem().toString();
//           String appt_end = txt_Appt_End_Time.getText().toString();
//           String appt_end_col = appt_end.substring(0,2)+""+appt_end.substring(3);
//           String newsql = "select * from Calender where App_date='"+ sqlDate.toString() +"' and App_Start_Time between  '"+appt_start +"' AND '" +appt_end_col +"' ";
//           System.out.println("newsql:" + newsql);
//           PreparedStatement pstsql = null;
//           pstsql = conn.prepareStatement(newsql);
//           rs = pstsql.executeQuery();
//           
//           if(rs.next()){
//               JOptionPane.showMessageDialog(null, "Appointment time is already taken.Choose other time...");
//           }
           
           //pst.executeQuery();
           pst.executeUpdate(); 
           Update_table();           
           clear(); //clears the fields           
           JOptionPane.showMessageDialog(null, "Appointment confirmed");
        } 
        catch (NumberFormatException | SQLException | HeadlessException e) {
          //  JOptionPane.showMessageDialog(null, "INSERT INTO Calender (Patient_ID,Patient_Name,Appointment Date,Appointment Time,Type) VALUES (?,?,?,?,?)");
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btn_Make_AppointmentActionPerformed

    private void cmb_MINItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_MINItemStateChanged
        // TODO add your handling code here:
        int hrs = Integer.parseInt(cmb_HR.getSelectedItem().toString());
        int mins = Integer.parseInt(cmb_MIN.getSelectedItem().toString());
       // System.out.println("hrs-mins:" + hrs + "-" + mins);
        //System.out.println("cmb_Type_Of_Appt" +cmb_Type_Of_Appt);
        if(cmb_Type_Of_Appt.getSelectedItem().equals("Annual Physical Exams")){
            mins = mins + 40;
            if(mins >= 60){
                hrs = hrs + 1;
                mins = mins - 60;
            }
        }
        
         if(cmb_Type_Of_Appt.getSelectedItem().equals("Follow Up")){
            mins = mins + 30;
            if(mins >= 60){
                hrs = hrs + 1;
                mins = mins - 60;
            }
        }
         
         if(cmb_Type_Of_Appt.getSelectedItem().equals("Regular")){
            mins = mins + 20;
            if(mins >= 60){
                hrs = hrs + 1;
                mins = mins - 60;
            }
        }
         
         if(cmb_Type_Of_Appt.getSelectedItem().equals("Other")){
            mins = 00;
            hrs = 00;
            
        }
         
        String Appt_End_Time = hrs+":"+mins; 
        txt_Appt_End_Time.setText(Appt_End_Time); 
        
    }//GEN-LAST:event_cmb_MINItemStateChanged

    private void btn_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ClearActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btn_ClearActionPerformed

    private void table_CalenderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_CalenderMouseClicked
        // TODO add your handling code here:
        try{
            int row = table_Calender.getSelectedRow();
            String Table_click = table_Calender.getModel().getValueAt(row, 0).toString();
            String sql = "Select * from Calender where Patient_ID = '"+ Table_click + "' ";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if(rs.next()){

                 // For getting Patient ID
                String patID = rs.getString("Patient_ID");
                txt_Patient_ID.setText(patID);
                
                 // For getting patient Name
                String patName = rs.getString("Patient_Name");
                txt_Patient_Name.setText(patName);
                
                // For getting Appt Date
                String ApptDt = rs.getString("App_Date");             
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");                                
                java.util.Date result = dateFormat.parse(ApptDt);  
                java.sql.Date sqlDate = new java.sql.Date(result.getTime()); 
                txt_Appt_Date.setDate(sqlDate);                
                
                // For getting type of appointment
                String typeOfAppt = rs.getString("Type Of Appt");
                cmb_Type_Of_Appt.setSelectedItem(typeOfAppt);        
                
                // For getting Appt start and end times
                String appStHrTime = rs.getString("App_Start_Time");
                String onlyHrTime = "";
                onlyHrTime = appStHrTime.substring(0,2);
                cmb_HR.setSelectedItem(onlyHrTime);                
                 onlyHrTime = appStHrTime.substring(3);
                 cmb_MIN.setSelectedItem(onlyHrTime);                
                 String appEndTime = rs.getString("App_End_Time");             
                 txt_Appt_End_Time.setText(appEndTime);
                 

            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_table_CalenderMouseClicked

    private void textfieldCalenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldCalenMouseClicked
        String selectedDate = txt_Show_Appointments.getDateFormatString();
        System.out.println("selectedDate:" +selectedDate);
        
    }//GEN-LAST:event_textfieldCalenMouseClicked

    private void textfieldCalenInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_textfieldCalenInputMethodTextChanged
        String selectedDate = txt_Show_Appointments.getDateFormatString();
        System.out.println("selectedDateinput:" +selectedDate);
//        String datefield = showdatefield.getText();
//                System.out.println("datefield:" +datefield);

    }//GEN-LAST:event_textfieldCalenInputMethodTextChanged

    private void textfieldCalenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldCalenFocusLost
        // TODO add your handling code here:
        String selectedDate = txt_Show_Appointments.getDateFormatString();
        System.out.println("focus:" +selectedDate);
    }//GEN-LAST:event_textfieldCalenFocusLost

    private void btn_show_AppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_AppointmentsActionPerformed
       try{
        java.util.Date selectedDate = txt_Show_Appointments.getJCalendar().getDate();
        DateFormat formatter ; 
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String outDate = formatter.format(selectedDate);
        System.out.println("button:" +outDate); 
        String sql = "select * from Calender where App_Date= '" +outDate + "'";
        System.out.println("button:" +sql); 
        pst = conn.prepareStatement(sql);
        rs = pst.executeQuery();
        Update_table_showAppointment(outDate);
               
       }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
       }
    }//GEN-LAST:event_btn_show_AppointmentsActionPerformed

    private void btn_show_All_AppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_All_AppointmentsActionPerformed
        // TODO add your handling code here:
        Update_table();
    }//GEN-LAST:event_btn_show_All_AppointmentsActionPerformed

    
    private void Update_table_showAppointment(String outDate) {
        try {
            String sql = "Select * from Calender where App_date='" + outDate +"'";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            table_Calender.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Calender().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Back;
    private javax.swing.JButton btn_Cancel_Appointment;
    private javax.swing.JButton btn_Clear;
    private javax.swing.JButton btn_Make_Appointment;
    private javax.swing.JButton btn_show_All_Appointments;
    private javax.swing.JButton btn_show_Appointments;
    private javax.swing.JComboBox cmb_HR;
    private javax.swing.JComboBox cmb_MIN;
    private javax.swing.JComboBox cmb_Type_Of_Appt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_CalenderforDrBillMiller;
    private javax.swing.JLabel lbl_Date;
    private javax.swing.JLabel lbl_Patient_ID;
    private javax.swing.JLabel lbl_Time;
    private javax.swing.JLabel lbl_Type;
    private javax.swing.JTable table_Calender;
    private com.toedter.calendar.JDateChooser txt_Appt_Date;
    private javax.swing.JTextField txt_Appt_End_Time;
    private javax.swing.JTextField txt_Patient_ID;
    private javax.swing.JTextField txt_Patient_Name;
    private com.toedter.calendar.JDateChooser txt_Show_Appointments;
    // End of variables declaration//GEN-END:variables
}
