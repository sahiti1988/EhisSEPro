/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ehis;

import java.awt.Dialog;
import java.sql.*;
import java.util.Date;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Joe
 */
public class ApptSelectorPanel extends javax.swing.JPanel {

    Connection conn;
    ResultSet rs;
    Statement stat;
    Vector<String> docUserIDs;
    Dialog dialog;
    
    int selectedAppTypeID;
    String selectedDoc;
    String patientID;
    Date nextAvailableTime;
    String selectedDate;

    /**
     * Creates new form AppointmentPanel
     */
    public ApptSelectorPanel(String patientID, Dialog dialog) {
        initComponents();
        this.dialog = dialog;
        this.patientID = patientID;
        docUserIDs = new Vector<>();
        conn = EHIS.getConnection();

        try {

            //populate doctors
            stat = conn.createStatement();
            rs = stat.executeQuery("Select * from Login JOIN UserType On UserType.TypeID = Login.UserTypeTypeID WHERE UserType.Type = 'Doctor';");
            while (rs.next()) {
                doctorCombo.addItem(rs.getString("FName") + " " + rs.getString("LName"));
                docUserIDs.add(rs.getString("UserID"));
            }

            //populate appointment types
            rs = stat.executeQuery("Select * from AppointmentType;");
            while (rs.next()) {
                typeCombo.addItem(rs.getString("AppType"));
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        field_Date = new com.toedter.calendar.JDateChooser();
        CheckApp = new javax.swing.JButton();
        fieldAvailableTime = new javax.swing.JTextField();

        jLabel1.setText("Doctor");

        jLabel2.setText("Appointment Chooser");

        jLabel3.setText("Type");

        jLabel4.setText("Select Date:");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Next Available Time:");

        CheckApp.setText("Check Availability");
        CheckApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckAppActionPerformed(evt);
            }
        });

        fieldAvailableTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldAvailableTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(doctorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(152, 152, 152)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(field_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CheckApp))
                            .addComponent(fieldAvailableTime, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(fieldAvailableTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(cancelButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(doctorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckApp)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(field_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String val = fieldAvailableTime.getText();
        System.out.println("val: "+ val);
        System.out.println("date" +selectedDate);
        System.out.println("nextTime:" + nextAvailableTime);
        System.out.println("PatID: " + patientID);
        System.out.println("DocID " + selectedDoc );
        System.out.println("apptTim: " + selectedAppTypeID);
        if(val.equals("") || val.charAt(0) == 'N')
            JOptionPane.showMessageDialog(this, "Must get Available time!");
        else {
            
            String sql = "INSERT INTO appointment(AppDate, AppTime, LoginPatientID, LoginDoctorID, AppointmentTypeAppTypeID) VALUES ('" +
                    selectedDate + "','" +
                    TimeAndDate.dateToTimeString(nextAvailableTime) + "','" +
                    patientID + "','" +
                    selectedDoc + "'," +
                    selectedAppTypeID + ");";
            System.out.println(sql);
            try {
                stat.execute(sql);
            } catch (SQLException ex) {
                Logger.getLogger(ApptSelectorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.dispose();
            
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void CheckAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckAppActionPerformed

        selectedDoc = docUserIDs.get(doctorCombo.getSelectedIndex());
        String selectedType = typeCombo.getSelectedItem().toString();

        
                    switch(selectedType.charAt(0)){
                        case 'A': selectedAppTypeID = 1;break;
                        case 'F': selectedAppTypeID = 2;break;
                        case 'R': selectedAppTypeID = 3;break;
                    }
        selectedDate = TimeAndDate.dateToDateString(field_Date.getDate());

        try {
            
            //get doctor start and end time for selected date
            rs = stat.executeQuery("SELECT StartTime, EndTime FROM calendar WHERE DoctorID = '"
                    + selectedDoc + "' AND Date = '" + selectedDate + "';");

            //if doc not working say so
            if (!rs.next()) {
                fieldAvailableTime.setText("No Times Available!");
                
            //else find next available time
            } else {
                
                Date docStartTime = TimeAndDate.timeStringToDate(rs.getString("StartTime"));
                Date docEndTime = TimeAndDate.timeStringToDate(rs.getString("EndTime"));
                
                //get all appointments for selected date
                rs = stat.executeQuery("SELECT * FROM appointment WHERE LoginDoctorID = '" + 
                        selectedDoc + "' AND AppDate = '" + selectedDate + "';");
                
                //if no appointments start time is next time
                if(!rs.next()){
                    
                    if(docEndTime.after(addAppointment(docStartTime, selectedAppTypeID))){
                        nextAvailableTime = docStartTime;
                        fieldAvailableTime.setText(TimeAndDate.dateToTimeString(docStartTime));
                        
                    }
                    else{
                        fieldAvailableTime.setText("No Times Available!");
                    }
                //else find latest time available
                } else {
                    nextAvailableTime = TimeAndDate.timeStringToDate(rs.getString("AppTime"));
                    while(rs.next()){
                        Date thisTime = TimeAndDate.timeStringToDate(rs.getString("AppTime"));
                        
                        if(thisTime.after(nextAvailableTime)){
                            nextAvailableTime = thisTime; 
                        }
                    }
                    if(docEndTime.after(addAppointment(nextAvailableTime, selectedAppTypeID)))
                        fieldAvailableTime.setText(TimeAndDate.dateToTimeString(nextAvailableTime));
                    else{
                        fieldAvailableTime.setText("No Times Available!");
                    }
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_CheckAppActionPerformed

    private Date addAppointment(Date date, int appType){
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        switch(appType){
            case 1:
                cal.add(Calendar.MINUTE, 40); break;
            case 2:
                cal.add(Calendar.MINUTE, 30); break;
            case 3:
                cal.add(Calendar.MINUTE, 20); break;
        }
        return cal.getTime();
    }
    
    private void fieldAvailableTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldAvailableTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldAvailableTimeActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckApp;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox doctorCombo;
    private javax.swing.JTextField fieldAvailableTime;
    private com.toedter.calendar.JDateChooser field_Date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox typeCombo;
    // End of variables declaration//GEN-END:variables
}
